/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider, BaseWalletLocked, AbstractAddress } from 'fuels';
import { Interface, Contract } from 'fuels';
import type { SwayswapContractAbi, SwayswapContractAbiInterface } from '../SwayswapContractAbi';
const _abi = {
  types: [
    {
      typeId: 0,
      type: '()',
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: 'b256',
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: 'struct ContractId',
      components: [
        {
          name: 'value',
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: 'token_id',
          type: 2,
          typeArguments: null,
        },
        {
          name: 'exchange_id',
          type: 2,
          typeArguments: null,
        },
      ],
      name: 'add_exchange_contract',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'token_id',
          type: 2,
          typeArguments: null,
        },
      ],
      name: 'get_exchange_contract',
      output: {
        name: '',
        type: 2,
        typeArguments: null,
      },
    },
  ],
  loggedTypes: [],
};

export class SwayswapContractAbi__factory {
  static readonly abi = _abi;
  static createInterface(): SwayswapContractAbiInterface {
    return new Interface(_abi) as unknown as SwayswapContractAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): SwayswapContractAbi {
    return new Contract(id, _abi, walletOrProvider) as unknown as SwayswapContractAbi;
  }
}
